{"file":"context-menu.entry.esm.js","mappings":";;AAAA,MAAM,cAAc,GAAG,sBAAsB;;ACE7C,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;MAOb,WAAW;EACtB;;IAoBA,qBAAgB,GAAG,OAAO,UAAU,GAAG,WAAW;MAChD,IAAI,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE;QACjB,IAAI,CAAC,UAAU,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC;QAClD,IAAI,CAAC,gBAAgB,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QACtF,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACxD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK;UACnD,KAAK,EAAE,CAAC,CAAC,KAAK;UACd,OAAO,EAAE;YACP,UAAU,EAAE,IAAI;WACjB;UAED,IAAI,oBAAO,CAAC,CAAE;SACf,CAAC,CAAC,CAAC;OACL;KACF,CAAC;;IAjCA,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC1D;EAQD,MAAM,iBAAiB,CAAC,EAAE;IACxB,EAAE,CAAC,cAAc,EAAE,CAAC;IACpB,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;IACjC,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC1D,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACrD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;GAC9B;EAkBD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,eAAa,CACR,EACP;GACH;;;;;;","names":[],"sources":["./src/components/context-menu/context-menu.css?tag=context-menu&encapsulation=shadow","./src/components/context-menu/context-menu.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Listen, Prop, h } from '@stencil/core';\n\nconst fin = window['fin'];\n\n@Component({\n  tag: 'context-menu',\n  styleUrl: 'context-menu.css',\n  shadow: true,\n})\nexport class ContextMenu {\n  constructor() {\n    this.setupContextMenu = this.setupContextMenu.bind(this);\n  }\n\n  availableIntents;\n  template;\n  currentWin;\n\n  @Prop() intentName;\n  @Listen('contextmenu', { target: 'window', capture: true })\n  async handleContextMenu(ev) {\n    ev.preventDefault();\n    await this.setupContextMenu(this.intentName);\n    const template = this.template;\n    console.log(\"Template\", template)\n    const win = fin.Window.wrapSync(this.currentWin.identity);\n    const result = await win.showPopupMenu({ template });\n    console.log(\"result\", result)\n  }\n\n  setupContextMenu = async (intentName = 'ViewChart') => {\n    if (fin.me.isView) {\n      this.currentWin = await fin.me.getCurrentWindow();\n      this.availableIntents = await fin.me.interop.getInfoForIntent({ intent: intentName });\n      console.log('available intents', this.availableIntents);\n      this.template = this.availableIntents.apps.map(i => ({\n        label: i.title,\n        visible: {\n          isEditable: true,\n        },\n\n        data: { ...i },\n      }));\n    }\n  };\n\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}