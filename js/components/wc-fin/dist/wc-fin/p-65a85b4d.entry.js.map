{"version":3,"names":["contextGroupPickerCss","fin","window","ContextGroupPicker","this","iconColor","iconId","availableContextGroups","undefined","showListOnClick","async","contextGroupId","viewIdentity","bindViews","me","isWindow","views","getCurrentViews","i","length","interop","joinContextGroup","identity","bindSelf","removeFromContextGroup","updateOptions","customData","selectedContextGroup","deselectOnMatch","find","entry","id","unselectedColor","leaveContextGroup","joinAllViews","color","saveSelectedContextGroup","showContextGroupList","showContextList","showListId","clearTimeout","setTimeout","listDelay","hideContextList","getContextGroupTooltip","isSelected","displayContextGroupId","charAt","toUpperCase","slice","selectedText","replace","leaveText","joinText","win","Window","getCurrent","on","attachedView","updateContextGroup","view","View","wrapSync","options","getOptions","currentContextGroup","contextGroups","getContextGroups","forEach","contextGroup","push","displayMetadata","isQueryStringEnabled","urlParams","URLSearchParams","location","search","get","componentWillLoad","setupContextPicker","then","_","render","h","onMouseLeave","bind","map","availableContextGroup","title","class","style","padding","cursor","onClick","unselectedText","onMouseEnter"],"sources":["./src/components/context-group-picker/context-group-picker.css?tag=fin-context-group-picker&encapsulation=shadow","./src/components/context-group-picker/context-group-picker.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n@keyframes fadeIn {\n  0% {\n      opacity: 0;\n  }\n  100% {\n      opacity: 1;\n  }\n}\n\n.fade-in {\n  animation: fadeIn ease 1s;\n}\n","import { Component, Prop, h, State } from '@stencil/core';\n\nconst fin = window['fin'];\n\n@Component({\n  tag: 'fin-context-group-picker',\n  styleUrl: 'context-group-picker.css',\n  shadow: true,\n})\nexport class ContextGroupPicker {\n  @State() showContextGroupList = false;\n  @State() contextGroupId = undefined;\n\n  iconColor = null;\n  iconId = null;\n  availableContextGroups = [];\n  showListId;\n\n  /**\n   * Bind views on Context Selection. Only supported when the control is on a window with childViews\n   */\n  @Prop() bindViews: boolean = true;\n\n  /**\n   * Bind the window/view the control is place on when Context Selection is made\n   */\n  @Prop() bindSelf: boolean = true;\n\n  /**\n   * What should the no context group selected color be\n   */\n  @Prop() unselectedColor: string = '#ffffff';\n\n  /**\n   * What should the delay be before switching to the list of context groups\n   */\n  @Prop() listDelay: number = 500;\n\n  /**\n   * Should the list of available options show when clicked or hovered?\n   */\n  @Prop() showListOnClick: boolean = true;\n\n  /**\n   * What should the tooltip show when no context group is selected\n   */\n  @Prop() unselectedText: string = 'No Context Group Selected' + (this.showListOnClick ? '. Click To Join.': '');\n\n  /**\n   * What should the tooltip show for the currently selected context group? Use {0} to represent where the group id should go\n   */\n  @Prop() selectedText: string = 'Current Context Is {0}' + (this.showListOnClick ? '. Click To Switch/Leave.': '');\n\n  /**\n   * What should the tooltip show for joining the context group? Use {0} to represent where the group id should go\n   */\n  @Prop() joinText: string = 'Switch to {0} Context Group';\n\n  /**\n   * What should the tooltip show for leaving the context group? Use {0} to represent where the group id should go\n   */\n  @Prop() leaveText: string = 'Leave {0} Context Group';\n\n  /**\n   * Support setting context group by Querystring: ?contextGroupId=green\n   */\n  @Prop() isQueryStringEnabled: boolean = false;\n\n  async joinContextGroup(contextGroupId: string, viewIdentity?: any) {\n    if (fin !== undefined) {\n      if (this.bindViews === true && fin.me.isWindow === true) {\n        if (viewIdentity === undefined) {\n          let views = await fin.me.getCurrentViews();\n          for (let i = 0; i < views.length; i++) {\n            await fin.me.interop.joinContextGroup(contextGroupId, views[i].identity);\n          }\n        } else {\n          await fin.me.interop.joinContextGroup(contextGroupId, viewIdentity);\n        }\n      }\n      if (this.bindSelf) {\n        await fin.me.interop.joinContextGroup(contextGroupId, fin.me.identity);\n      }\n\n    }\n  }\n\n  async leaveContextGroup(viewIdentity?: any) {\n    if (fin !== undefined) {\n      if (this.bindViews === true && fin.me.isWindow === true) {\n        if (viewIdentity === undefined) {\n          let views = await fin.me.getCurrentViews();\n          for (let i = 0; i < views.length; i++) {\n            await fin.me.interop.removeFromContextGroup(views[i].identity);\n          }\n        } else {\n          await fin.me.interop.removeFromContextGroup(viewIdentity);\n        }\n      }\n      if (this.bindSelf) {\n        await fin.me.interop.removeFromContextGroup(fin.me.identity);\n      }\n    }\n  }\n\n  async saveSelectedContextGroup(contextGroupId:string) {\n    if(this.bindSelf === false) {\n      // if we are not assigning the context group against ourselves but only childViews then it will not fall under interop within options. Save to a backup location.\n      await fin.me.updateOptions({customData: { selectedContextGroup: contextGroupId }});\n    }\n  }\n\n  async updateContextGroup(contextGroupId: string, viewIdentity?: any, deselectOnMatch = true) {\n    let selectedContextGroup = this.availableContextGroups.find(entry => entry.id === contextGroupId);\n\n    if (selectedContextGroup !== null && selectedContextGroup !== undefined) {\n      if (this.contextGroupId === contextGroupId && deselectOnMatch) {\n        this.contextGroupId = undefined;\n        this.iconColor = this.unselectedColor;\n        this.iconId = undefined;\n        await this.leaveContextGroup(viewIdentity);\n      } else {\n        let joinAllViews = this.contextGroupId === undefined;\n        this.iconColor = selectedContextGroup.color;\n        this.iconId = selectedContextGroup.id;\n        this.contextGroupId = contextGroupId;\n        if(joinAllViews) {\n          await this.joinContextGroup(contextGroupId);\n        } else {\n          await this.joinContextGroup(contextGroupId, viewIdentity);\n        }\n      }\n\n      await this.saveSelectedContextGroup(this.contextGroupId);\n      this.showContextGroupList = false;\n    }\n  }\n\n  private showContextList() {\n    if (this.showListId !== undefined) {\n      clearTimeout(this.showListId);\n    }\n    this.showListId = setTimeout(() => {\n      this.showContextGroupList = true;\n      this.showListId = undefined;\n    }, this.listDelay);\n  }\n\n  private hideContextList() {\n    this.showContextGroupList = false;\n  }\n\n  private getContextGroupTooltip(contextGroupId: string, isSelected = false) {\n    let displayContextGroupId = contextGroupId.charAt(0).toUpperCase() + contextGroupId.slice(1);\n\n    if (isSelected) {\n      return this.selectedText.replace('{0}', displayContextGroupId);\n    }\n    if (contextGroupId === this.contextGroupId) {\n      return this.leaveText.replace('{0}', displayContextGroupId);\n    }\n    return this.joinText.replace('{0}', displayContextGroupId);\n  }\n\n  private async setupContextPicker() {\n    if (fin !== undefined) {\n      if (this.bindViews && fin.me.isWindow === true) {\n        let win = await fin.Window.getCurrent();\n        win.on('view-attached', async attachedView => {\n          if (this.contextGroupId !== undefined) {\n            setTimeout(async () => {\n              await this.updateContextGroup(this.contextGroupId, attachedView.viewIdentity, false);\n            }, 1000);\n          } else {\n            let view = fin.View.wrapSync(attachedView.viewIdentity);\n            let options = await view.getOptions();\n            if (options.interop !== undefined && options.interop.currentContextGroup !== undefined) {\n              await this.updateContextGroup(options.interop.currentContextGroup, attachedView.viewIdentity);\n            }\n          }\n        });\n      }\n\n      let contextGroups = await fin.me.interop.getContextGroups();\n      contextGroups.forEach(contextGroup => {\n        this.availableContextGroups.push({ id: contextGroup.id, color: contextGroup.displayMetadata.color });\n      });\n\n      if (this.isQueryStringEnabled) {\n        const urlParams = new URLSearchParams(window.location.search);\n        const contextGroupId = urlParams.get('contextGroupId');\n        if (contextGroupId !== undefined && contextGroupId !== null) {\n          await this.updateContextGroup(contextGroupId);\n        }\n      }\n\n      if(this.contextGroupId === undefined) {\n        let options = await fin.me.getOptions();\n        let selectedContextGroup: string;\n\n        if(options.interop !== undefined && options.interop.currentContextGroup !== undefined) {\n            selectedContextGroup = options.interop.currentContextGroup; \n        } else if(this.bindSelf === false && options.customData !== undefined && options.customData.selectedContextGroup !== undefined) {\n            selectedContextGroup = options.customData.selectedContextGroup;\n        }\n\n        await this.updateContextGroup(selectedContextGroup);\n      }\n    }\n  }\n\n  componentWillLoad() {\n    this.setupContextPicker().then(_ => {});\n  }\n\n  render() {\n    if (this.showContextGroupList) {\n      return (\n        <div id=\"available-context\" onMouseLeave={this.hideContextList.bind(this)}>\n          {' '}\n          {this.availableContextGroups.map(availableContextGroup => (\n            <span\n              title={this.getContextGroupTooltip(availableContextGroup.id)}\n              class=\"fade-in\"\n              style={{ padding: '0px 5px', color: availableContextGroup.color, cursor: 'pointer' }}\n              onClick={() => this.updateContextGroup(availableContextGroup.id)}\n            >\n              &#11044;\n            </span>\n          ))}\n        </div>\n      );\n    } else if (this.contextGroupId === undefined) {\n      return (\n        <div>\n          {this.showListOnClick ? (\n            <span onClick={this.showContextList.bind(this)} title={this.unselectedText} style={{ padding: '0px 5px', color: `${this.unselectedColor}` }}>\n              &#11044;\n            </span>\n          ) : (\n            <span onMouseEnter={this.showContextList.bind(this)} title={this.unselectedText} style={{ padding: '0px 5px', color: `${this.unselectedColor}` }}>\n              &#11044;\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div id=\"selected-context\">\n          {this.showListOnClick ? (\n            <span\n              onClick={this.showContextList.bind(this)}\n              title={this.getContextGroupTooltip(this.contextGroupId, true)}\n              style={{ padding: '0px 5px', color: `${this.iconColor}` }}\n            >\n              &#11044;\n            </span>\n          ) : (\n            <span\n              onMouseEnter={this.showContextList.bind(this)}\n              title={this.getContextGroupTooltip(this.contextGroupId, true)}\n              style={{ padding: '0px 5px', color: `${this.iconColor}` }}\n            >\n              &#11044;\n            </span>\n          )}\n        </div>\n      );\n    }\n  }\n}\n"],"mappings":"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"}