{"file":"fin-context-group-picker.entry.cjs.js","mappings":"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","names":["h"],"sources":["./src/components/context-group-picker/context-group-picker.css?tag=fin-context-group-picker&encapsulation=shadow","./src/components/context-group-picker/context-group-picker.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n@keyframes fadeIn {\n  0% {\n      opacity: 0;\n  }\n  100% {\n      opacity: 1;\n  }\n}\n\n.fade-in {\n  animation: fadeIn ease 1s;\n}\n","import { Component, Prop, h, State } from '@stencil/core';\n\nconst fin = window['fin'];\n\n@Component({\n  tag: 'fin-context-group-picker',\n  styleUrl: 'context-group-picker.css',\n  shadow: true,\n})\nexport class ContextGroupPicker {\n  @State() showContextGroupList = false;\n  @State() contextGroupId = undefined;\n\n  iconColor = null;\n  iconId = null;\n  availableContextGroups = [];\n  showListId;\n\n  /**\n   * Bind views on Context Selection. Only supported when the control is on a window with childViews\n   */\n  @Prop() bindViews: boolean = true;\n\n  /**\n   * Bind the window/view the control is place on when Context Selection is made\n   */\n  @Prop() bindSelf: boolean = true;\n\n  /**\n   * What should the no context group selected color be\n   */\n  @Prop() unselectedColor: string = '#ffffff';\n\n  /**\n   * What should the delay be before switching to the list of context groups\n   */\n  @Prop() listDelay: number = 500;\n\n  /**\n   * Should the list of available options show when clicked or hovered?\n   */\n  @Prop() showListOnClick: boolean = true;\n\n  /**\n   * What should the tooltip show when no context group is selected\n   */\n  @Prop() unselectedText: string = 'No Context Group Selected' + (this.showListOnClick ? '. Click To Join.': '');\n\n  /**\n   * What should the tooltip show for the currently selected context group? Use {0} to represent where the group id should go\n   */\n  @Prop() selectedText: string = 'Current Context Is {0}' + (this.showListOnClick ? '. Click To Switch/Leave.': '');\n\n  /**\n   * What should the tooltip show for joining the context group? Use {0} to represent where the group id should go\n   */\n  @Prop() joinText: string = 'Switch to {0} Context Group';\n\n  /**\n   * What should the tooltip show for leaving the context group? Use {0} to represent where the group id should go\n   */\n  @Prop() leaveText: string = 'Leave {0} Context Group';\n\n  /**\n   * Support setting context group by Querystring: ?contextGroupId=green\n   */\n  @Prop() isQueryStringEnabled: boolean = false;\n\n  async joinContextGroup(contextGroupId: string, viewIdentity?: any) {\n    if (fin !== undefined) {\n      if (this.bindViews === true && fin.me.isWindow === true) {\n        if (viewIdentity === undefined) {\n          let views = await fin.me.getCurrentViews();\n          for (let i = 0; i < views.length; i++) {\n            await fin.me.interop.joinContextGroup(contextGroupId, views[i].identity);\n          }\n        } else {\n          await fin.me.interop.joinContextGroup(contextGroupId, viewIdentity);\n        }\n      }\n      if (this.bindSelf) {\n        await fin.me.interop.joinContextGroup(contextGroupId, fin.me.identity);\n      }\n\n    }\n  }\n\n  async leaveContextGroup(viewIdentity?: any) {\n    if (fin !== undefined) {\n      if (this.bindViews === true && fin.me.isWindow === true) {\n        if (viewIdentity === undefined) {\n          let views = await fin.me.getCurrentViews();\n          for (let i = 0; i < views.length; i++) {\n            await fin.me.interop.removeFromContextGroup(views[i].identity);\n          }\n        } else {\n          await fin.me.interop.removeFromContextGroup(viewIdentity);\n        }\n      }\n      if (this.bindSelf) {\n        await fin.me.interop.removeFromContextGroup(fin.me.identity);\n      }\n    }\n  }\n\n  async saveSelectedContextGroup(contextGroupId:string) {\n    if(this.bindSelf === false) {\n      // if we are not assigning the context group against ourselves but only childViews then it will not fall under interop within options. Save to a backup location.\n      await fin.me.updateOptions({customData: { selectedContextGroup: contextGroupId }});\n    }\n  }\n\n  async updateContextGroup(contextGroupId: string, viewIdentity?: any, deselectOnMatch = true) {\n    let selectedContextGroup = this.availableContextGroups.find(entry => entry.id === contextGroupId);\n\n    if (selectedContextGroup !== null && selectedContextGroup !== undefined) {\n      if (this.contextGroupId === contextGroupId && deselectOnMatch) {\n        this.contextGroupId = undefined;\n        this.iconColor = this.unselectedColor;\n        this.iconId = undefined;\n        await this.leaveContextGroup(viewIdentity);\n      } else {\n        let joinAllViews = this.contextGroupId === undefined;\n        this.iconColor = selectedContextGroup.color;\n        this.iconId = selectedContextGroup.id;\n        this.contextGroupId = contextGroupId;\n        if(joinAllViews) {\n          await this.joinContextGroup(contextGroupId);\n        } else {\n          await this.joinContextGroup(contextGroupId, viewIdentity);\n        }\n      }\n\n      await this.saveSelectedContextGroup(this.contextGroupId);\n      this.showContextGroupList = false;\n    }\n  }\n\n  private showContextList() {\n    if (this.showListId !== undefined) {\n      clearTimeout(this.showListId);\n    }\n    this.showListId = setTimeout(() => {\n      this.showContextGroupList = true;\n      this.showListId = undefined;\n    }, this.listDelay);\n  }\n\n  private hideContextList() {\n    this.showContextGroupList = false;\n  }\n\n  private getContextGroupTooltip(contextGroupId: string, isSelected = false) {\n    let displayContextGroupId = contextGroupId.charAt(0).toUpperCase() + contextGroupId.slice(1);\n\n    if (isSelected) {\n      return this.selectedText.replace('{0}', displayContextGroupId);\n    }\n    if (contextGroupId === this.contextGroupId) {\n      return this.leaveText.replace('{0}', displayContextGroupId);\n    }\n    return this.joinText.replace('{0}', displayContextGroupId);\n  }\n\n  private async setupContextPicker() {\n    if (fin !== undefined) {\n      if (this.bindViews && fin.me.isWindow === true) {\n        let win = await fin.Window.getCurrent();\n        win.on('view-attached', async attachedView => {\n          if (this.contextGroupId !== undefined) {\n            setTimeout(async () => {\n              await this.updateContextGroup(this.contextGroupId, attachedView.viewIdentity, false);\n            }, 1000);\n          } else {\n            let view = fin.View.wrapSync(attachedView.viewIdentity);\n            let options = await view.getOptions();\n            if (options.interop !== undefined && options.interop.currentContextGroup !== undefined) {\n              await this.updateContextGroup(options.interop.currentContextGroup, attachedView.viewIdentity);\n            }\n          }\n        });\n      }\n\n      let contextGroups = await fin.me.interop.getContextGroups();\n      contextGroups.forEach(contextGroup => {\n        this.availableContextGroups.push({ id: contextGroup.id, color: contextGroup.displayMetadata.color });\n      });\n\n      if (this.isQueryStringEnabled) {\n        const urlParams = new URLSearchParams(window.location.search);\n        const contextGroupId = urlParams.get('contextGroupId');\n        if (contextGroupId !== undefined && contextGroupId !== null) {\n          await this.updateContextGroup(contextGroupId);\n        }\n      }\n\n      if(this.contextGroupId === undefined) {\n        let options = await fin.me.getOptions();\n        let selectedContextGroup: string;\n\n        if(options.interop !== undefined && options.interop.currentContextGroup !== undefined) {\n            selectedContextGroup = options.interop.currentContextGroup; \n        } else if(this.bindSelf === false && options.customData !== undefined && options.customData.selectedContextGroup !== undefined) {\n            selectedContextGroup = options.customData.selectedContextGroup;\n        }\n\n        await this.updateContextGroup(selectedContextGroup);\n      }\n    }\n  }\n\n  componentWillLoad() {\n    this.setupContextPicker().then(_ => {});\n  }\n\n  render() {\n    if (this.showContextGroupList) {\n      return (\n        <div id=\"available-context\" onMouseLeave={this.hideContextList.bind(this)}>\n          {' '}\n          {this.availableContextGroups.map(availableContextGroup => (\n            <span\n              title={this.getContextGroupTooltip(availableContextGroup.id)}\n              class=\"fade-in\"\n              style={{ padding: '0px 5px', color: availableContextGroup.color, cursor: 'pointer' }}\n              onClick={() => this.updateContextGroup(availableContextGroup.id)}\n            >\n              &#11044;\n            </span>\n          ))}\n        </div>\n      );\n    } else if (this.contextGroupId === undefined) {\n      return (\n        <div>\n          {this.showListOnClick ? (\n            <span onClick={this.showContextList.bind(this)} title={this.unselectedText} style={{ padding: '0px 5px', color: `${this.unselectedColor}` }}>\n              &#11044;\n            </span>\n          ) : (\n            <span onMouseEnter={this.showContextList.bind(this)} title={this.unselectedText} style={{ padding: '0px 5px', color: `${this.unselectedColor}` }}>\n              &#11044;\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div id=\"selected-context\">\n          {this.showListOnClick ? (\n            <span\n              onClick={this.showContextList.bind(this)}\n              title={this.getContextGroupTooltip(this.contextGroupId, true)}\n              style={{ padding: '0px 5px', color: `${this.iconColor}` }}\n            >\n              &#11044;\n            </span>\n          ) : (\n            <span\n              onMouseEnter={this.showContextList.bind(this)}\n              title={this.getContextGroupTooltip(this.contextGroupId, true)}\n              style={{ padding: '0px 5px', color: `${this.iconColor}` }}\n            >\n              &#11044;\n            </span>\n          )}\n        </div>\n      );\n    }\n  }\n}\n"],"version":3}